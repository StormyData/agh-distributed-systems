/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sr.rpc.thrift;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-04-19")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class AdvancedCalculator {

  public interface Iface extends Calculator.Iface {

    public double op(OperationType type, java.util.Set<java.lang.Double> val) throws InvalidArguments, org.apache.thrift.TException;

    public java.util.List<java.lang.Double> matmul(java.util.List<java.util.List<java.lang.Double>> matrix, java.util.List<java.lang.Double> vector) throws InvalidArguments, org.apache.thrift.TException;

  }

  public interface AsyncIface extends Calculator.AsyncIface {

    public void op(OperationType type, java.util.Set<java.lang.Double> val, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void matmul(java.util.List<java.util.List<java.lang.Double>> matrix, java.util.List<java.lang.Double> vector, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends Calculator.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public double op(OperationType type, java.util.Set<java.lang.Double> val) throws InvalidArguments, org.apache.thrift.TException
    {
      send_op(type, val);
      return recv_op();
    }

    public void send_op(OperationType type, java.util.Set<java.lang.Double> val) throws org.apache.thrift.TException
    {
      op_args args = new op_args();
      args.setType(type);
      args.setVal(val);
      sendBase("op", args);
    }

    public double recv_op() throws InvalidArguments, org.apache.thrift.TException
    {
      op_result result = new op_result();
      receiveBase(result, "op");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "op failed: unknown result");
    }

    @Override
    public java.util.List<java.lang.Double> matmul(java.util.List<java.util.List<java.lang.Double>> matrix, java.util.List<java.lang.Double> vector) throws InvalidArguments, org.apache.thrift.TException
    {
      send_matmul(matrix, vector);
      return recv_matmul();
    }

    public void send_matmul(java.util.List<java.util.List<java.lang.Double>> matrix, java.util.List<java.lang.Double> vector) throws org.apache.thrift.TException
    {
      matmul_args args = new matmul_args();
      args.setMatrix(matrix);
      args.setVector(vector);
      sendBase("matmul", args);
    }

    public java.util.List<java.lang.Double> recv_matmul() throws InvalidArguments, org.apache.thrift.TException
    {
      matmul_result result = new matmul_result();
      receiveBase(result, "matmul");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "matmul failed: unknown result");
    }

  }
  public static class AsyncClient extends Calculator.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void op(OperationType type, java.util.Set<java.lang.Double> val, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      op_call method_call = new op_call(type, val, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class op_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private OperationType type;
      private java.util.Set<java.lang.Double> val;
      public op_call(OperationType type, java.util.Set<java.lang.Double> val, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.val = val;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("op", org.apache.thrift.protocol.TMessageType.CALL, 0));
        op_args args = new op_args();
        args.setType(type);
        args.setVal(val);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Double getResult() throws InvalidArguments, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_op();
      }
    }

    @Override
    public void matmul(java.util.List<java.util.List<java.lang.Double>> matrix, java.util.List<java.lang.Double> vector, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      matmul_call method_call = new matmul_call(matrix, vector, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class matmul_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Double>> {
      private java.util.List<java.util.List<java.lang.Double>> matrix;
      private java.util.List<java.lang.Double> vector;
      public matmul_call(java.util.List<java.util.List<java.lang.Double>> matrix, java.util.List<java.lang.Double> vector, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matrix = matrix;
        this.vector = vector;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("matmul", org.apache.thrift.protocol.TMessageType.CALL, 0));
        matmul_args args = new matmul_args();
        args.setMatrix(matrix);
        args.setVector(vector);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<java.lang.Double> getResult() throws InvalidArguments, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_matmul();
      }
    }

  }

  public static class Processor<I extends Iface> extends Calculator.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("op", new op());
      processMap.put("matmul", new matmul());
      return processMap;
    }

    public static class op<I extends Iface> extends org.apache.thrift.ProcessFunction<I, op_args> {
      public op() {
        super("op");
      }

      @Override
      public op_args getEmptyArgsInstance() {
        return new op_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public op_result getResult(I iface, op_args args) throws org.apache.thrift.TException {
        op_result result = new op_result();
        try {
          result.success = iface.op(args.type, args.val);
          result.setSuccessIsSet(true);
        } catch (InvalidArguments ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class matmul<I extends Iface> extends org.apache.thrift.ProcessFunction<I, matmul_args> {
      public matmul() {
        super("matmul");
      }

      @Override
      public matmul_args getEmptyArgsInstance() {
        return new matmul_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public matmul_result getResult(I iface, matmul_args args) throws org.apache.thrift.TException {
        matmul_result result = new matmul_result();
        try {
          result.success = iface.matmul(args.matrix, args.vector);
        } catch (InvalidArguments ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends Calculator.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("op", new op());
      processMap.put("matmul", new matmul());
      return processMap;
    }

    public static class op<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, op_args, java.lang.Double> {
      public op() {
        super("op");
      }

      @Override
      public op_args getEmptyArgsInstance() {
        return new op_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          @Override
          public void onComplete(java.lang.Double o) {
            op_result result = new op_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            op_result result = new op_result();
            if (e instanceof InvalidArguments) {
              result.ex = (InvalidArguments) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, op_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.op(args.type, args.val,resultHandler);
      }
    }

    public static class matmul<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, matmul_args, java.util.List<java.lang.Double>> {
      public matmul() {
        super("matmul");
      }

      @Override
      public matmul_args getEmptyArgsInstance() {
        return new matmul_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>>() { 
          @Override
          public void onComplete(java.util.List<java.lang.Double> o) {
            matmul_result result = new matmul_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            matmul_result result = new matmul_result();
            if (e instanceof InvalidArguments) {
              result.ex = (InvalidArguments) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, matmul_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
        iface.matmul(args.matrix, args.vector,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class op_args implements org.apache.thrift.TBase<op_args, op_args._Fields>, java.io.Serializable, Cloneable, Comparable<op_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("op_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("val", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new op_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new op_argsTupleSchemeFactory();

    /**
     * 
     * @see OperationType
     */
    public @org.apache.thrift.annotation.Nullable OperationType type; // required
    public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Double> val; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see OperationType
       */
      TYPE((short)1, "type"),
      VAL((short)2, "val");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // VAL
            return VAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OperationType.class)));
      tmpMap.put(_Fields.VAL, new org.apache.thrift.meta_data.FieldMetaData("val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(op_args.class, metaDataMap);
    }

    public op_args() {
    }

    public op_args(
      OperationType type,
      java.util.Set<java.lang.Double> val)
    {
      this();
      this.type = type;
      this.val = val;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public op_args(op_args other) {
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetVal()) {
        java.util.Set<java.lang.Double> __this__val = new java.util.HashSet<java.lang.Double>(other.val);
        this.val = __this__val;
      }
    }

    @Override
    public op_args deepCopy() {
      return new op_args(this);
    }

    @Override
    public void clear() {
      this.type = null;
      this.val = null;
    }

    /**
     * 
     * @see OperationType
     */
    @org.apache.thrift.annotation.Nullable
    public OperationType getType() {
      return this.type;
    }

    /**
     * 
     * @see OperationType
     */
    public op_args setType(@org.apache.thrift.annotation.Nullable OperationType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public int getValSize() {
      return (this.val == null) ? 0 : this.val.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Double> getValIterator() {
      return (this.val == null) ? null : this.val.iterator();
    }

    public void addToVal(double elem) {
      if (this.val == null) {
        this.val = new java.util.HashSet<java.lang.Double>();
      }
      this.val.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.lang.Double> getVal() {
      return this.val;
    }

    public op_args setVal(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Double> val) {
      this.val = val;
      return this;
    }

    public void unsetVal() {
      this.val = null;
    }

    /** Returns true if field val is set (has been assigned a value) and false otherwise */
    public boolean isSetVal() {
      return this.val != null;
    }

    public void setValIsSet(boolean value) {
      if (!value) {
        this.val = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((OperationType)value);
        }
        break;

      case VAL:
        if (value == null) {
          unsetVal();
        } else {
          setVal((java.util.Set<java.lang.Double>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case VAL:
        return getVal();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case VAL:
        return isSetVal();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof op_args)
        return this.equals((op_args)that);
      return false;
    }

    public boolean equals(op_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_val = true && this.isSetVal();
      boolean that_present_val = true && that.isSetVal();
      if (this_present_val || that_present_val) {
        if (!(this_present_val && that_present_val))
          return false;
        if (!this.val.equals(that.val))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.getValue();

      hashCode = hashCode * 8191 + ((isSetVal()) ? 131071 : 524287);
      if (isSetVal())
        hashCode = hashCode * 8191 + val.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(op_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetVal(), other.isSetVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val, other.val);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("op_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("val:");
      if (this.val == null) {
        sb.append("null");
      } else {
        sb.append(this.val);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class op_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public op_argsStandardScheme getScheme() {
        return new op_argsStandardScheme();
      }
    }

    private static class op_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<op_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, op_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = sr.rpc.thrift.OperationType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.val = new java.util.HashSet<java.lang.Double>(2*_set0.size);
                  double _elem1;
                  for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                  {
                    _elem1 = iprot.readDouble();
                    struct.val.add(_elem1);
                  }
                  iprot.readSetEnd();
                }
                struct.setValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, op_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.val != null) {
          oprot.writeFieldBegin(VAL_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, struct.val.size()));
            for (double _iter3 : struct.val)
            {
              oprot.writeDouble(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class op_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public op_argsTupleScheme getScheme() {
        return new op_argsTupleScheme();
      }
    }

    private static class op_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<op_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, op_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetVal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetVal()) {
          {
            oprot.writeI32(struct.val.size());
            for (double _iter4 : struct.val)
            {
              oprot.writeDouble(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, op_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.type = sr.rpc.thrift.OperationType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set5 = iprot.readSetBegin(org.apache.thrift.protocol.TType.DOUBLE);
            struct.val = new java.util.HashSet<java.lang.Double>(2*_set5.size);
            double _elem6;
            for (int _i7 = 0; _i7 < _set5.size; ++_i7)
            {
              _elem6 = iprot.readDouble();
              struct.val.add(_elem6);
            }
          }
          struct.setValIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class op_result implements org.apache.thrift.TBase<op_result, op_result._Fields>, java.io.Serializable, Cloneable, Comparable<op_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("op_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new op_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new op_resultTupleSchemeFactory();

    public double success; // required
    public @org.apache.thrift.annotation.Nullable InvalidArguments ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidArguments.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(op_result.class, metaDataMap);
    }

    public op_result() {
    }

    public op_result(
      double success,
      InvalidArguments ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public op_result(op_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new InvalidArguments(other.ex);
      }
    }

    @Override
    public op_result deepCopy() {
      return new op_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.ex = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public op_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidArguments getEx() {
      return this.ex;
    }

    public op_result setEx(@org.apache.thrift.annotation.Nullable InvalidArguments ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidArguments)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof op_result)
        return this.equals((op_result)that);
      return false;
    }

    public boolean equals(op_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(op_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("op_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class op_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public op_resultStandardScheme getScheme() {
        return new op_resultStandardScheme();
      }
    }

    private static class op_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<op_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, op_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidArguments();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, op_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class op_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public op_resultTupleScheme getScheme() {
        return new op_resultTupleScheme();
      }
    }

    private static class op_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<op_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, op_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, op_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new InvalidArguments();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class matmul_args implements org.apache.thrift.TBase<matmul_args, matmul_args._Fields>, java.io.Serializable, Cloneable, Comparable<matmul_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("matmul_args");

    private static final org.apache.thrift.protocol.TField MATRIX_FIELD_DESC = new org.apache.thrift.protocol.TField("matrix", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("vector", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new matmul_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new matmul_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> matrix; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> vector; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATRIX((short)1, "matrix"),
      VECTOR((short)2, "vector");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATRIX
            return MATRIX;
          case 2: // VECTOR
            return VECTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATRIX, new org.apache.thrift.meta_data.FieldMetaData("matrix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.VECTOR, new org.apache.thrift.meta_data.FieldMetaData("vector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(matmul_args.class, metaDataMap);
    }

    public matmul_args() {
    }

    public matmul_args(
      java.util.List<java.util.List<java.lang.Double>> matrix,
      java.util.List<java.lang.Double> vector)
    {
      this();
      this.matrix = matrix;
      this.vector = vector;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public matmul_args(matmul_args other) {
      if (other.isSetMatrix()) {
        java.util.List<java.util.List<java.lang.Double>> __this__matrix = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.matrix.size());
        for (java.util.List<java.lang.Double> other_element : other.matrix) {
          java.util.List<java.lang.Double> __this__matrix_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__matrix.add(__this__matrix_copy);
        }
        this.matrix = __this__matrix;
      }
      if (other.isSetVector()) {
        java.util.List<java.lang.Double> __this__vector = new java.util.ArrayList<java.lang.Double>(other.vector);
        this.vector = __this__vector;
      }
    }

    @Override
    public matmul_args deepCopy() {
      return new matmul_args(this);
    }

    @Override
    public void clear() {
      this.matrix = null;
      this.vector = null;
    }

    public int getMatrixSize() {
      return (this.matrix == null) ? 0 : this.matrix.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getMatrixIterator() {
      return (this.matrix == null) ? null : this.matrix.iterator();
    }

    public void addToMatrix(java.util.List<java.lang.Double> elem) {
      if (this.matrix == null) {
        this.matrix = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.matrix.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getMatrix() {
      return this.matrix;
    }

    public matmul_args setMatrix(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> matrix) {
      this.matrix = matrix;
      return this;
    }

    public void unsetMatrix() {
      this.matrix = null;
    }

    /** Returns true if field matrix is set (has been assigned a value) and false otherwise */
    public boolean isSetMatrix() {
      return this.matrix != null;
    }

    public void setMatrixIsSet(boolean value) {
      if (!value) {
        this.matrix = null;
      }
    }

    public int getVectorSize() {
      return (this.vector == null) ? 0 : this.vector.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Double> getVectorIterator() {
      return (this.vector == null) ? null : this.vector.iterator();
    }

    public void addToVector(double elem) {
      if (this.vector == null) {
        this.vector = new java.util.ArrayList<java.lang.Double>();
      }
      this.vector.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Double> getVector() {
      return this.vector;
    }

    public matmul_args setVector(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> vector) {
      this.vector = vector;
      return this;
    }

    public void unsetVector() {
      this.vector = null;
    }

    /** Returns true if field vector is set (has been assigned a value) and false otherwise */
    public boolean isSetVector() {
      return this.vector != null;
    }

    public void setVectorIsSet(boolean value) {
      if (!value) {
        this.vector = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MATRIX:
        if (value == null) {
          unsetMatrix();
        } else {
          setMatrix((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      case VECTOR:
        if (value == null) {
          unsetVector();
        } else {
          setVector((java.util.List<java.lang.Double>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MATRIX:
        return getMatrix();

      case VECTOR:
        return getVector();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MATRIX:
        return isSetMatrix();
      case VECTOR:
        return isSetVector();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof matmul_args)
        return this.equals((matmul_args)that);
      return false;
    }

    public boolean equals(matmul_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_matrix = true && this.isSetMatrix();
      boolean that_present_matrix = true && that.isSetMatrix();
      if (this_present_matrix || that_present_matrix) {
        if (!(this_present_matrix && that_present_matrix))
          return false;
        if (!this.matrix.equals(that.matrix))
          return false;
      }

      boolean this_present_vector = true && this.isSetVector();
      boolean that_present_vector = true && that.isSetVector();
      if (this_present_vector || that_present_vector) {
        if (!(this_present_vector && that_present_vector))
          return false;
        if (!this.vector.equals(that.vector))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMatrix()) ? 131071 : 524287);
      if (isSetMatrix())
        hashCode = hashCode * 8191 + matrix.hashCode();

      hashCode = hashCode * 8191 + ((isSetVector()) ? 131071 : 524287);
      if (isSetVector())
        hashCode = hashCode * 8191 + vector.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(matmul_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMatrix(), other.isSetMatrix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatrix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matrix, other.matrix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetVector(), other.isSetVector());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVector()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vector, other.vector);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("matmul_args(");
      boolean first = true;

      sb.append("matrix:");
      if (this.matrix == null) {
        sb.append("null");
      } else {
        sb.append(this.matrix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vector:");
      if (this.vector == null) {
        sb.append("null");
      } else {
        sb.append(this.vector);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class matmul_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public matmul_argsStandardScheme getScheme() {
        return new matmul_argsStandardScheme();
      }
    }

    private static class matmul_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<matmul_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, matmul_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATRIX
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.matrix = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list8.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    {
                      org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                      _elem9 = new java.util.ArrayList<java.lang.Double>(_list11.size);
                      double _elem12;
                      for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                      {
                        _elem12 = iprot.readDouble();
                        _elem9.add(_elem12);
                      }
                      iprot.readListEnd();
                    }
                    struct.matrix.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setMatrixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VECTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                  struct.vector = new java.util.ArrayList<java.lang.Double>(_list14.size);
                  double _elem15;
                  for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                  {
                    _elem15 = iprot.readDouble();
                    struct.vector.add(_elem15);
                  }
                  iprot.readListEnd();
                }
                struct.setVectorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, matmul_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matrix != null) {
          oprot.writeFieldBegin(MATRIX_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.matrix.size()));
            for (java.util.List<java.lang.Double> _iter17 : struct.matrix)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter17.size()));
                for (double _iter18 : _iter17)
                {
                  oprot.writeDouble(_iter18);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.vector != null) {
          oprot.writeFieldBegin(VECTOR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.vector.size()));
            for (double _iter19 : struct.vector)
            {
              oprot.writeDouble(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class matmul_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public matmul_argsTupleScheme getScheme() {
        return new matmul_argsTupleScheme();
      }
    }

    private static class matmul_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<matmul_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, matmul_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMatrix()) {
          optionals.set(0);
        }
        if (struct.isSetVector()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMatrix()) {
          {
            oprot.writeI32(struct.matrix.size());
            for (java.util.List<java.lang.Double> _iter20 : struct.matrix)
            {
              {
                oprot.writeI32(_iter20.size());
                for (double _iter21 : _iter20)
                {
                  oprot.writeDouble(_iter21);
                }
              }
            }
          }
        }
        if (struct.isSetVector()) {
          {
            oprot.writeI32(struct.vector.size());
            for (double _iter22 : struct.vector)
            {
              oprot.writeDouble(_iter22);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, matmul_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.matrix = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list23.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem24 = new java.util.ArrayList<java.lang.Double>(_list26.size);
                double _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = iprot.readDouble();
                  _elem24.add(_elem27);
                }
              }
              struct.matrix.add(_elem24);
            }
          }
          struct.setMatrixIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
            struct.vector = new java.util.ArrayList<java.lang.Double>(_list29.size);
            double _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readDouble();
              struct.vector.add(_elem30);
            }
          }
          struct.setVectorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class matmul_result implements org.apache.thrift.TBase<matmul_result, matmul_result._Fields>, java.io.Serializable, Cloneable, Comparable<matmul_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("matmul_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new matmul_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new matmul_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> success; // required
    public @org.apache.thrift.annotation.Nullable InvalidArguments ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidArguments.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(matmul_result.class, metaDataMap);
    }

    public matmul_result() {
    }

    public matmul_result(
      java.util.List<java.lang.Double> success,
      InvalidArguments ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public matmul_result(matmul_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Double> __this__success = new java.util.ArrayList<java.lang.Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new InvalidArguments(other.ex);
      }
    }

    @Override
    public matmul_result deepCopy() {
      return new matmul_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Double>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Double> getSuccess() {
      return this.success;
    }

    public matmul_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidArguments getEx() {
      return this.ex;
    }

    public matmul_result setEx(@org.apache.thrift.annotation.Nullable InvalidArguments ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Double>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidArguments)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof matmul_result)
        return this.equals((matmul_result)that);
      return false;
    }

    public boolean equals(matmul_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(matmul_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("matmul_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class matmul_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public matmul_resultStandardScheme getScheme() {
        return new matmul_resultStandardScheme();
      }
    }

    private static class matmul_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<matmul_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, matmul_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Double>(_list32.size);
                  double _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readDouble();
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidArguments();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, matmul_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter35 : struct.success)
            {
              oprot.writeDouble(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class matmul_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public matmul_resultTupleScheme getScheme() {
        return new matmul_resultTupleScheme();
      }
    }

    private static class matmul_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<matmul_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, matmul_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter36 : struct.success)
            {
              oprot.writeDouble(_iter36);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, matmul_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
            struct.success = new java.util.ArrayList<java.lang.Double>(_list37.size);
            double _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readDouble();
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new InvalidArguments();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
