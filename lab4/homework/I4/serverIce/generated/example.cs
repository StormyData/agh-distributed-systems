//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `example.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Example
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class ClassWithOptionalField : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public global::Ice.Optional<int> optionalField;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int required;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ClassWithOptionalField()
        {
            this.optionalField = new global::Ice.Optional<int>();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ClassWithOptionalField(global::Ice.Optional<int> optionalField, int required)
        {
            this.optionalField = optionalField;
            this.required = required;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Example::ClassWithOptionalField";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(required);
            ostr_.writeInt(1, optionalField);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            required = istr_.readInt();
            optionalField = istr_.readInt(1);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ExceptionWithOptionalValue : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public global::Ice.Optional<string> why;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        private void _initDM()
        {
            this.why = new global::Ice.Optional<string>();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ExceptionWithOptionalValue()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ExceptionWithOptionalValue(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ExceptionWithOptionalValue(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.why = (global::Ice.Optional<string>)info.GetValue("why", typeof(global::Ice.Optional<string>));
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        private void _initDM(global::Ice.Optional<string> why)
        {
            this.why = why;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ExceptionWithOptionalValue(global::Ice.Optional<string> why)
        {
            _initDM(why);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ExceptionWithOptionalValue(global::Ice.Optional<string> why, global::System.Exception ex) : base(ex)
        {
            _initDM(why);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return "::Example::ExceptionWithOptionalValue";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Example::ExceptionWithOptionalValue");
            global::IceInternal.HashUtil.hashAdd(ref h_, why.Value);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            ExceptionWithOptionalValue o = other as ExceptionWithOptionalValue;
            if(o == null)
            {
                return false;
            }
            if(!this.why.Equals(o.why))
            {
                return false;
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("why", this.why, typeof(global::Ice.Optional<string>));

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator==(ExceptionWithOptionalValue lhs, ExceptionWithOptionalValue rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator!=(ExceptionWithOptionalValue lhs, ExceptionWithOptionalValue rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Example::ExceptionWithOptionalValue", -1, true);
            ostr_.writeString(1, why);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            why = istr_.readString(1);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ExampleInterface : global::Ice.Object, ExampleInterfaceOperations_
    {
    }
}

namespace Example
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_ExampleInterface_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_ExampleInterface_methodThrowingExceptionWithOptionalValue();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_ExampleInterface_methodAcceptingClassWithOptionalValues(int ret);
}

namespace Example
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface ExampleInterfacePrx : global::Ice.ObjectPrx
    {
        global::Ice.Optional<int> methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Ice.Optional<int>> methodWithOptionalReturnAndSomeArgsAsync(global::Ice.Optional<int> arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ExampleInterface_methodWithOptionalReturnAndSomeArgs> begin_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.Optional<int> end_methodWithOptionalReturnAndSomeArgs(global::Ice.AsyncResult asyncResult);

        void methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task methodThrowingExceptionWithOptionalValueAsync(bool hasWhy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ExampleInterface_methodThrowingExceptionWithOptionalValue> begin_methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_methodThrowingExceptionWithOptionalValue(global::Ice.AsyncResult asyncResult);

        int methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> methodAcceptingClassWithOptionalValuesAsync(ClassWithOptionalField arg, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ExampleInterface_methodAcceptingClassWithOptionalValues> begin_methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_methodAcceptingClassWithOptionalValues(global::Ice.AsyncResult asyncResult);
    }
}

namespace Example
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface ExampleInterfaceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        global::Ice.Optional<int> methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        int methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.Current current = null);
    }
}

namespace Example
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    [global::System.Serializable]
    public sealed class ExampleInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, ExampleInterfacePrx
    {
        public ExampleInterfacePrxHelper()
        {
        }

        public ExampleInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public global::Ice.Optional<int> methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_methodWithOptionalReturnAndSomeArgsAsync(arg1, arg2, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_methodThrowingExceptionWithOptionalValueAsync(hasWhy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_methodAcceptingClassWithOptionalValuesAsync(arg, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<global::Ice.Optional<int>> methodWithOptionalReturnAndSomeArgsAsync(global::Ice.Optional<int> arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_methodWithOptionalReturnAndSomeArgsAsync(arg1, arg2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Optional<int>> _iceI_methodWithOptionalReturnAndSomeArgsAsync(global::Ice.Optional<int> iceP_arg1, int iceP_arg2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_methodWithOptionalReturnAndSomeArgs_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Optional<int>>(progress, cancel);
            _iceI_methodWithOptionalReturnAndSomeArgs(iceP_arg1, iceP_arg2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _methodWithOptionalReturnAndSomeArgs_name = "methodWithOptionalReturnAndSomeArgs";

        private void _iceI_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> iceP_arg1, int iceP_arg2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Optional<int>>(completed);
            outAsync.invoke(
                _methodWithOptionalReturnAndSomeArgs_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_arg2);
                    ostr.writeInt(1, iceP_arg1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.Optional<int> ret;
                    ret = istr.readInt(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task methodThrowingExceptionWithOptionalValueAsync(bool hasWhy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_methodThrowingExceptionWithOptionalValueAsync(hasWhy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_methodThrowingExceptionWithOptionalValueAsync(bool iceP_hasWhy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_methodThrowingExceptionWithOptionalValue_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_methodThrowingExceptionWithOptionalValue(iceP_hasWhy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _methodThrowingExceptionWithOptionalValue_name = "methodThrowingExceptionWithOptionalValue";

        private void _iceI_methodThrowingExceptionWithOptionalValue(bool iceP_hasWhy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _methodThrowingExceptionWithOptionalValue_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_hasWhy);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ExceptionWithOptionalValue)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<int> methodAcceptingClassWithOptionalValuesAsync(ClassWithOptionalField arg, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_methodAcceptingClassWithOptionalValuesAsync(arg, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_methodAcceptingClassWithOptionalValuesAsync(ClassWithOptionalField iceP_arg, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_methodAcceptingClassWithOptionalValues_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_methodAcceptingClassWithOptionalValues(iceP_arg, context, synchronous, completed);
            return completed.Task;
        }

        private const string _methodAcceptingClassWithOptionalValues_name = "methodAcceptingClassWithOptionalValues";

        private void _iceI_methodAcceptingClassWithOptionalValues(ClassWithOptionalField iceP_arg, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _methodAcceptingClassWithOptionalValues_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_arg);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ExampleInterface_methodWithOptionalReturnAndSomeArgs> begin_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_methodWithOptionalReturnAndSomeArgs(arg1, arg2, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_methodWithOptionalReturnAndSomeArgs(arg1, arg2, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_methodWithOptionalReturnAndSomeArgs(arg1, arg2, context, callback, cookie, false);
        }

        public global::Ice.Optional<int> end_methodWithOptionalReturnAndSomeArgs(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _methodWithOptionalReturnAndSomeArgs_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.Optional<int>>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ExampleInterface_methodWithOptionalReturnAndSomeArgs> begin_methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> iceP_arg1, int iceP_arg2, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_methodWithOptionalReturnAndSomeArgs_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ExampleInterface_methodWithOptionalReturnAndSomeArgs, global::Ice.Optional<int>>(
                (Callback_ExampleInterface_methodWithOptionalReturnAndSomeArgs cb, global::Ice.Optional<int> ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _methodWithOptionalReturnAndSomeArgs_name, cookie, completedCallback);
            _iceI_methodWithOptionalReturnAndSomeArgs(iceP_arg1, iceP_arg2, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ExampleInterface_methodThrowingExceptionWithOptionalValue> begin_methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_methodThrowingExceptionWithOptionalValue(hasWhy, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_methodThrowingExceptionWithOptionalValue(hasWhy, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_methodThrowingExceptionWithOptionalValue(hasWhy, context, callback, cookie, false);
        }

        public void end_methodThrowingExceptionWithOptionalValue(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _methodThrowingExceptionWithOptionalValue_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ExampleInterface_methodThrowingExceptionWithOptionalValue> begin_methodThrowingExceptionWithOptionalValue(bool iceP_hasWhy, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_methodThrowingExceptionWithOptionalValue_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ExampleInterface_methodThrowingExceptionWithOptionalValue, object>(
                (Callback_ExampleInterface_methodThrowingExceptionWithOptionalValue cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _methodThrowingExceptionWithOptionalValue_name, cookie, completedCallback);
            _iceI_methodThrowingExceptionWithOptionalValue(iceP_hasWhy, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ExampleInterface_methodAcceptingClassWithOptionalValues> begin_methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_methodAcceptingClassWithOptionalValues(arg, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_methodAcceptingClassWithOptionalValues(arg, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_methodAcceptingClassWithOptionalValues(arg, context, callback, cookie, false);
        }

        public int end_methodAcceptingClassWithOptionalValues(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _methodAcceptingClassWithOptionalValues_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ExampleInterface_methodAcceptingClassWithOptionalValues> begin_methodAcceptingClassWithOptionalValues(ClassWithOptionalField iceP_arg, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_methodAcceptingClassWithOptionalValues_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ExampleInterface_methodAcceptingClassWithOptionalValues, int>(
                (Callback_ExampleInterface_methodAcceptingClassWithOptionalValues cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _methodAcceptingClassWithOptionalValues_name, cookie, completedCallback);
            _iceI_methodAcceptingClassWithOptionalValues(iceP_arg, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ExampleInterfacePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ExampleInterfacePrx r = b as ExampleInterfacePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ExampleInterfacePrxHelper h = new ExampleInterfacePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ExampleInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ExampleInterfacePrx r = b as ExampleInterfacePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ExampleInterfacePrxHelper h = new ExampleInterfacePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ExampleInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ExampleInterfacePrxHelper h = new ExampleInterfacePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ExampleInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ExampleInterfacePrxHelper h = new ExampleInterfacePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ExampleInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ExampleInterfacePrx r = b as ExampleInterfacePrx;
            if(r == null)
            {
                ExampleInterfacePrxHelper h = new ExampleInterfacePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ExampleInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ExampleInterfacePrxHelper h = new ExampleInterfacePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Example::ExampleInterface",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ExampleInterfacePrx v)
        {
            ostr.writeProxy(v);
        }

        public static ExampleInterfacePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ExampleInterfacePrxHelper result = new ExampleInterfacePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Example
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public abstract class ExampleInterfaceDisp_ : global::Ice.ObjectImpl, ExampleInterface
    {
        #region Slice operations

        public abstract global::Ice.Optional<int> methodWithOptionalReturnAndSomeArgs(global::Ice.Optional<int> arg1, int arg2, global::Ice.Current current = null);

        public abstract void methodThrowingExceptionWithOptionalValue(bool hasWhy, global::Ice.Current current = null);

        public abstract int methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Example::ExampleInterface",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_methodWithOptionalReturnAndSomeArgs(ExampleInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Optional<int> iceP_arg1;
            int iceP_arg2;
            iceP_arg2 = istr.readInt();
            iceP_arg1 = istr.readInt(1);
            inS.endReadParams();
            var ret = obj.methodWithOptionalReturnAndSomeArgs(iceP_arg1, iceP_arg2, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(3, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_methodThrowingExceptionWithOptionalValue(ExampleInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_hasWhy;
            iceP_hasWhy = istr.readBool();
            inS.endReadParams();
            obj.methodThrowingExceptionWithOptionalValue(iceP_hasWhy, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_methodAcceptingClassWithOptionalValues(ExampleInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ClassWithOptionalField iceP_arg;
            iceP_arg = null;
            istr.readValue((ClassWithOptionalField v) => {iceP_arg = v; });
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.methodAcceptingClassWithOptionalValues(iceP_arg, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "methodAcceptingClassWithOptionalValues",
            "methodThrowingExceptionWithOptionalValue",
            "methodWithOptionalReturnAndSomeArgs"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_methodAcceptingClassWithOptionalValues(this, inS, current);
                }
                case 5:
                {
                    return iceD_methodThrowingExceptionWithOptionalValue(this, inS, current);
                }
                case 6:
                {
                    return iceD_methodWithOptionalReturnAndSomeArgs(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
