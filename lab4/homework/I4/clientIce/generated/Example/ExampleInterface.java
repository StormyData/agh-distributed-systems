//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `example.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Example;

public interface ExampleInterface extends com.zeroc.Ice.Object
{
    java.util.OptionalInt methodWithOptionalReturnAndSomeArgs(java.util.OptionalInt arg1, int arg2, com.zeroc.Ice.Current current);

    void methodThrowingExceptionWithOptionalValue(boolean hasWhy, com.zeroc.Ice.Current current)
        throws ExceptionWithOptionalValue;

    int methodAcceptingClassWithOptionalValues(ClassWithOptionalField arg, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Example::ExampleInterface",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Example::ExampleInterface";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_methodWithOptionalReturnAndSomeArgs(ExampleInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalInt iceP_arg1;
        int iceP_arg2;
        iceP_arg2 = istr.readInt();
        iceP_arg1 = istr.readInt(1);
        inS.endReadParams();
        java.util.OptionalInt ret = obj.methodWithOptionalReturnAndSomeArgs(iceP_arg1, iceP_arg2, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(3, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_methodThrowingExceptionWithOptionalValue(ExampleInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_hasWhy;
        iceP_hasWhy = istr.readBool();
        inS.endReadParams();
        obj.methodThrowingExceptionWithOptionalValue(iceP_hasWhy, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_methodAcceptingClassWithOptionalValues(ExampleInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<ClassWithOptionalField> icePP_arg = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_arg.value = v, ClassWithOptionalField.class);
        istr.readPendingValues();
        inS.endReadParams();
        ClassWithOptionalField iceP_arg = icePP_arg.value;
        int ret = obj.methodAcceptingClassWithOptionalValues(iceP_arg, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "methodAcceptingClassWithOptionalValues",
        "methodThrowingExceptionWithOptionalValue",
        "methodWithOptionalReturnAndSomeArgs"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_methodAcceptingClassWithOptionalValues(this, in, current);
            }
            case 5:
            {
                return _iceD_methodThrowingExceptionWithOptionalValue(this, in, current);
            }
            case 6:
            {
                return _iceD_methodWithOptionalReturnAndSomeArgs(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
